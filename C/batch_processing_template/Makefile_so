# the compiler: gcc for C program, define as g++ for C++
CC = gcc

# compiler flags:
#  -g    adds debugging information to the executable file
#  -Wall turns on most, but not all, compiler warnings
CFLAGS  = -Wall -g

# define any directories containing header files other than /usr/include
INCLUDES = -I./header

# define library paths in addition to /usr/lib
#   if I wanted to include libraries not in /usr/lib I'd specify
#   their path using -Lpath, something like:
LFLAGS = -L.

# define any libraries to link into executable:
#   if I want to link in libraries (libx.so or libx.a) I use the -llibname 
#   option, something like (this will link in libmylib.so and libm.so:
LIBS = -lmylibpre -lmylibpost

# define the executable file 
MAIN = kbbatch

# define the C source files
SRCS = kb_pre_process.c\
       kb_main_process.c\
       kb_post_process.c

# define the C object files
OBJS = $(SRCS:%.c=%.o)

#
# The following part of the makefile is generic
#

.PHONY: clean

all: $(MAIN)
	@echo "Compiler named kbbatch has been compiled"

$(MAIN): $(SRCS)
	$(CC) -shared $(INCLUDES) kb_pre_process.c -o libmylibpre.so
	$(CC) -shared $(INCLUDES) kb_post_process.c -o libmylibpost.so
	$(CC) $(CFLAGS) $(INCLUDES) kb_main_process.c -o $(MAIN) $(LFLAGS) $(LIBS)

#
# this is a suffix replacement rule
#

clean:
	$(RM) *.o $(MAIN) 
